from aiogram import types
from aiogram.fsm.context import FSMContext
from datetime import datetime
from keyboards.inline import retry_kb
from models.db import SessionLocal
from services.embeddings import get_embedding
from services.search import semantic_search
from state.lost_state import LostState
from utils.md import md_escape


async def cancel_handler(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=None)
    from handlers.start import start_handler
    await start_handler(message)


async def date_handler(message: types.Message, state: FSMContext):
    text = message.text.strip()
    try:
        date_lost = datetime.strptime(text, "%d.%m.%Y").date()
    except ValueError:
        return await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –î–î.MM.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 01.01.2025):"
        )
    await state.update_data(date_lost=date_lost)
    await state.set_state(LostState.station)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –º–µ—Ç—Ä–æ:")


async def station_handler(message: types.Message, state: FSMContext):
    station = message.text.strip()
    await state.update_data(station=station)
    await state.set_state(LostState.description)
    await message.answer("–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–ø–∞–∂—É:")


async def description_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    date_lost = data["date_lost"]
    station = data["station"]
    desc = message.text.strip()

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ... –ò–¥—ë—Ç –ø–æ–∏—Å–∫ –≤–µ—â–µ–π –ø–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é üîç")

    query_emb = get_embedding(desc)
    async with SessionLocal() as session:
        results = await semantic_search(session, query_emb, limit=5)


    if results:
        reply_lines = ["*–ù–∞–π–¥–µ–Ω—ã –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è:*\n"]
        for item in results:
            lost_date = item.date_lost.strftime('%d.%m.%Y')
            reply_lines.append(f"*–î–∞—Ç–∞ –Ω–∞—Ö–æ–¥–∫–∏:* {md_escape(lost_date)}")
            reply_lines.append(f"*–°—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ:* {md_escape(item.station)}")
            reply_lines.append(f"*–û–ø–∏—Å–∞–Ω–∏–µ –≤–µ—â–∏:* {md_escape(item.description)}")
            reply_lines.append("")
        reply = "\n".join(reply_lines).strip()
    else:
        reply = "–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    await message.answer(reply, parse_mode="MarkdownV2")
    await message.answer(
        "–ï—Å–ª–∏ –≤–∞—à–µ–π –≤–µ—â–∏ –Ω–µ—Ç –≤ –ø–æ—Ö–æ–∂–∏—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫–∞—Ç—å –µ—â—ë —Ä–∞–∑:",
        reply_markup=retry_kb
    )

    await state.clear()
